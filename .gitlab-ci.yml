# DNA Messenger - GitLab CI/CD Pipeline
# Builds for all major platforms with static linking where required

# Only run on main branch
workflow:
  rules:
    - if: $CI_COMMIT_BRANCH == "main"
      when: always
    - when: never

stages:
  - build
  - test
  - package

variables:
  GIT_SUBMODULE_STRATEGY: recursive
  CMAKE_BUILD_TYPE: Release

## Linux x86_64 build (native)
build:linux-x64:
  stage: build
  tags:
    - linux
  image: ubuntu:22.04
  before_script:
    - apt-get update -qq
    - apt-get install -y -qq cmake gcc g++ make git
    - apt-get install -y -qq libssl-dev libpq-dev libjson-c-dev libcurl4-openssl-dev
    - apt-get install -y -qq qtbase5-dev qtmultimedia5-dev
  script:
    - mkdir -p build
    - cd build
    - cmake .. -DCMAKE_BUILD_TYPE=Release -DBUILD_GUI=ON
    - make -j$(nproc)

    # Copy artifacts to /build mount (accessible from host)
    - |
      if [ -d /build ]; then
        BUILD_DIR="/build/dna-messenger-linux-x64-${CI_COMMIT_SHORT_SHA}"
        echo "Copying artifacts to ${BUILD_DIR}..."
        mkdir -p "${BUILD_DIR}"
        cp -v dna_messenger "${BUILD_DIR}/" 2>/dev/null || echo "CLI not found"
        cp -v gui/dna_messenger_gui "${BUILD_DIR}/" 2>/dev/null || echo "GUI not found"
        echo "Build artifacts copied to ${BUILD_DIR}"
        ls -lh "${BUILD_DIR}/"
      else
        echo "Warning: /build directory not mounted, skipping artifact copy"
      fi

  artifacts:
    name: "dna-messenger-linux-x64-${CI_COMMIT_SHORT_SHA}"
    paths:
      - build/dna_messenger
      - build/gui/dna_messenger_gui
    expire_in: 1 week

# Linux ARM64 build (native build using QEMU emulation)
build:linux-arm64:
  stage: build
  tags:
    - linux
  image:
    name: arm64v8/ubuntu:22.04
    docker:
      platform: linux/arm64
  before_script:
    - apt-get update -qq
    - apt-get install -y -qq cmake gcc g++ make git
    - apt-get install -y -qq libssl-dev libpq-dev libjson-c-dev libcurl4-openssl-dev
    - apt-get install -y -qq qtbase5-dev qtmultimedia5-dev
  script:
    - mkdir -p build
    - cd build
    - cmake .. -DCMAKE_BUILD_TYPE=Release -DBUILD_GUI=ON
    - make -j$(nproc)

    # Copy artifacts to /build mount (accessible from host)
    - |
      if [ -d /build ]; then
        BUILD_DIR="/build/dna-messenger-linux-arm64-${CI_COMMIT_SHORT_SHA}"
        echo "Copying artifacts to ${BUILD_DIR}..."
        mkdir -p "${BUILD_DIR}"
        cp -v dna_messenger "${BUILD_DIR}/" 2>/dev/null || echo "CLI not found"
        cp -v gui/dna_messenger_gui "${BUILD_DIR}/" 2>/dev/null || echo "GUI not found"
        echo "Build artifacts copied to ${BUILD_DIR}"
        ls -lh "${BUILD_DIR}/"
      else
        echo "Warning: /build directory not mounted, skipping artifact copy"
      fi

  artifacts:
    name: "dna-messenger-linux-arm64-${CI_COMMIT_SHORT_SHA}"
    paths:
      - build/dna_messenger
      - build/gui/dna_messenger_gui
    expire_in: 1 week

# Windows x86_64 build (using pre-built MXE packages from pkg.mxe.cc)
build:windows-x64-mingw:
  stage: build
  tags:
    - linux
  image: ubuntu:20.04
  timeout: 30m
  before_script:
    # Install required tools for MXE APT repository
    - apt-get update -qq
    - apt-get install -y -qq software-properties-common lsb-release gnupg cmake make

    # Add MXE APT repository (official method from mxe.cc)
    - apt-key adv --keyserver keyserver.ubuntu.com --recv-keys 86B72ED9
    - add-apt-repository "deb [arch=amd64] https://pkg.mxe.cc/repos/apt $(lsb_release -sc) main"
    - apt-get update -qq

    # Install MXE pre-built packages (much faster than building from source!)
    - echo "Installing MXE pre-built packages..."
    - apt-get install -y -qq mxe-x86-64-w64-mingw32.static-cc
    - apt-get install -y -qq mxe-x86-64-w64-mingw32.static-qtbase
    - apt-get install -y -qq mxe-x86-64-w64-mingw32.static-qtmultimedia
    - apt-get install -y -qq mxe-x86-64-w64-mingw32.static-postgresql
    - apt-get install -y -qq mxe-x86-64-w64-mingw32.static-json-c
    - apt-get install -y -qq mxe-x86-64-w64-mingw32.static-curl

    # Set up MXE environment
    - export PATH=/usr/lib/mxe/usr/bin:$PATH
    - export MXE_PREFIX=/usr/lib/mxe/usr/x86_64-w64-mingw32.static
    - echo "MXE installed at $MXE_PREFIX"

    # Verify installation
    - x86_64-w64-mingw32.static-gcc --version

  script:
    - export PATH=/usr/lib/mxe/usr/bin:$PATH
    - export MXE_PREFIX=/usr/lib/mxe/usr/x86_64-w64-mingw32.static
    - cd $CI_PROJECT_DIR
    - mkdir -p build
    - cd build
    - |
      cat > toolchain-mingw64.cmake << EOF
      set(CMAKE_SYSTEM_NAME Windows)
      set(CMAKE_SYSTEM_PROCESSOR x86_64)
      set(CMAKE_C_COMPILER x86_64-w64-mingw32.static-gcc)
      set(CMAKE_CXX_COMPILER x86_64-w64-mingw32.static-g++)
      set(CMAKE_RC_COMPILER x86_64-w64-mingw32.static-windres)
      set(CMAKE_FIND_ROOT_PATH /usr/lib/mxe/usr/x86_64-w64-mingw32.static)
      set(CMAKE_FIND_ROOT_PATH_MODE_PROGRAM NEVER)
      set(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY)
      set(CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY)
      set(WIN32 TRUE)
      set(MINGW TRUE)
      # Force static linking
      set(CMAKE_EXE_LINKER_FLAGS "-static -static-libgcc -static-libstdc++")
      set(CMAKE_FIND_LIBRARY_SUFFIXES ".a")
      set(BUILD_SHARED_LIBS OFF)
      set(PKG_CONFIG_EXECUTABLE /usr/lib/mxe/usr/bin/x86_64-w64-mingw32.static-pkg-config)
      set(Qt5_DIR "/usr/lib/mxe/usr/x86_64-w64-mingw32.static/qt5/lib/cmake/Qt5")
      set(Qt5Core_DIR "/usr/lib/mxe/usr/x86_64-w64-mingw32.static/qt5/lib/cmake/Qt5Core")
      set(Qt5Widgets_DIR "/usr/lib/mxe/usr/x86_64-w64-mingw32.static/qt5/lib/cmake/Qt5Widgets")
      set(Qt5Multimedia_DIR "/usr/lib/mxe/usr/x86_64-w64-mingw32.static/qt5/lib/cmake/Qt5Multimedia")
      EOF
    - echo "Configuring CMake..."
    - cmake .. -DCMAKE_TOOLCHAIN_FILE=toolchain-mingw64.cmake -DCMAKE_BUILD_TYPE=Release -DBUILD_GUI=ON
    - echo "Building..."
    - make -j$(nproc) VERBOSE=1

    # Copy artifacts to /build mount (accessible from host)
    - |
      if [ -d /build ]; then
        BUILD_DIR="/build/dna-messenger-windows-x64-${CI_COMMIT_SHORT_SHA}"
        echo "Copying artifacts to ${BUILD_DIR}..."
        mkdir -p "${BUILD_DIR}"
        cp -v dna_messenger.exe "${BUILD_DIR}/" 2>/dev/null || echo "CLI not found"
        cp -v gui/dna_messenger_gui.exe "${BUILD_DIR}/" 2>/dev/null || echo "GUI not found"
        echo "Build artifacts copied to ${BUILD_DIR}"
        ls -lh "${BUILD_DIR}/"
      else
        echo "Warning: /build directory not mounted, skipping artifact copy"
      fi

  artifacts:
    name: "dna-messenger-windows-x64-${CI_COMMIT_SHORT_SHA}"
    paths:
      - build/dna_messenger.exe
      - build/gui/dna_messenger_gui.exe
    expire_in: 1 week
#
## macOS x86_64 build (requires osxcross)
#build:macos-x64:
#  stage: build
#  tags:
#    - linux
#    - osxcross
#  image: ubuntu:22.04
#  before_script:
#    - apt-get update -qq
#    - apt-get install -y -qq cmake gcc g++ make git
#  script:
#    - export OSXCROSS_TARGET_DIR=/opt/osxcross
#    - export PATH=$OSXCROSS_TARGET_DIR/bin:$PATH
#    - mkdir -p build
#    - cd build
#    - |
#      cat > toolchain-macos.cmake << EOF
#      set(CMAKE_SYSTEM_NAME Darwin)
#      set(CMAKE_SYSTEM_PROCESSOR x86_64)
#      set(CMAKE_C_COMPILER ${OSXCROSS_TARGET_DIR}/bin/x86_64-apple-darwin21.4-clang)
#      set(CMAKE_CXX_COMPILER ${OSXCROSS_TARGET_DIR}/bin/x86_64-apple-darwin21.4-clang++)
#      set(CMAKE_FIND_ROOT_PATH ${OSXCROSS_TARGET_DIR})
#      set(CMAKE_FIND_ROOT_PATH_MODE_PROGRAM NEVER)
#      set(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY)
#      set(CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY)
#      set(CMAKE_OSX_ARCHITECTURES x86_64)
#      EOF
#    - cmake .. -DCMAKE_TOOLCHAIN_FILE=toolchain-macos.cmake -DCMAKE_BUILD_TYPE=Release -DBUILD_GUI=OFF
#    - make -j$(nproc)
#  #artifacts:
#  #  name: "dna-messenger-macos-x64-${CI_COMMIT_SHORT_SHA}"
#  #  paths:
#  #    - build/dna_messenger
#  #  expire_in: 1 week
#  #allow_failure: true  # osxcross may not be available
#
## macOS ARM64 build (Apple Silicon, requires osxcross)
#build:macos-arm64:
#  stage: build
#  tags:
#    - linux
#    - osxcross
#  image: ubuntu:22.04
#  before_script:
#    - apt-get update -qq
#    - apt-get install -y -qq cmake gcc g++ make git
#  script:
#    - export OSXCROSS_TARGET_DIR=/opt/osxcross
#    - export PATH=$OSXCROSS_TARGET_DIR/bin:$PATH
#    - mkdir -p build
#    - cd build
#    - |
#      cat > toolchain-macos-arm64.cmake << EOF
#      set(CMAKE_SYSTEM_NAME Darwin)
#      set(CMAKE_SYSTEM_PROCESSOR aarch64)
#      set(CMAKE_C_COMPILER ${OSXCROSS_TARGET_DIR}/bin/aarch64-apple-darwin21.4-clang)
#      set(CMAKE_CXX_COMPILER ${OSXCROSS_TARGET_DIR}/bin/aarch64-apple-darwin21.4-clang++)
#      set(CMAKE_FIND_ROOT_PATH ${OSXCROSS_TARGET_DIR})
#      set(CMAKE_FIND_ROOT_PATH_MODE_PROGRAM NEVER)
#      set(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY)
#      set(CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY)
#      set(CMAKE_OSX_ARCHITECTURES arm64)
#      EOF
#    - cmake .. -DCMAKE_TOOLCHAIN_FILE=toolchain-macos-arm64.cmake -DCMAKE_BUILD_TYPE=Release -DBUILD_GUI=OFF
#    - make -j$(nproc)
#  #artifacts:
#  #  name: "dna-messenger-macos-arm64-${CI_COMMIT_SHORT_SHA}"
#  #  paths:
#  #    - build/dna_messenger
#  #  expire_in: 1 week
#  #allow_failure: true  # osxcross may not be available
#
## Test job (run on Linux)
#test:linux:
#  stage: test
#  tags:
#    - linux
#  image: ubuntu:22.04
#  dependencies:
#    - build:linux-x64
#  before_script:
#    - apt-get update -qq
#    - apt-get install -y -qq libssl3 libpq5 libjson-c5 qtbase5-dev
#  script:
#    - ./build/dna_messenger --version
#    - echo "Basic smoke test passed"

## Package job (create release archives)
#package:all:
#  stage: package
#  tags:
#    - linux
#  image: ubuntu:22.04
#  dependencies:
#    - build:linux-x64
#    - build:linux-arm64
#    - build:windows-x64
#  before_script:
#    - apt-get update -qq
#    - apt-get install -y -qq zip tar
#  script:
#    - VERSION=$(git rev-list --count HEAD)
#    - GIT_HASH=$(git log -1 --format=%h)
#    - FULL_VERSION="0.1.${VERSION}-${GIT_HASH}"
#    - mkdir -p dist
#
#    # Linux x86_64
#    - mkdir -p dist/linux-x64
#    - cp build/dna_messenger dist/linux-x64/ || true
#    - cp build/gui/dna_messenger_gui dist/linux-x64/ || true
#    - cd dist && tar -czf dna-messenger-${FULL_VERSION}-linux-x64.tar.gz linux-x64/ && cd ..
#
#    # Linux ARM64
#    - mkdir -p dist/linux-arm64
#    - cp build/dna_messenger dist/linux-arm64/ || true
#    - cd dist && tar -czf dna-messenger-${FULL_VERSION}-linux-arm64.tar.gz linux-arm64/ && cd ..
#
#    # Windows x86_64
#    - mkdir -p dist/windows-x64
#    - cp build/Release/dna_messenger.exe dist/windows-x64/ || true
#    - cp build/gui/Release/dna_messenger_gui.exe dist/windows-x64/ || true
#    - cd dist && zip -r dna-messenger-${FULL_VERSION}-windows-x64.zip windows-x64/ && cd ..
#
#    - echo "Packaged version ${FULL_VERSION}"
#  artifacts:
#    name: "dna-messenger-packages-${CI_COMMIT_SHORT_SHA}"
#    paths:
#      - dist/*.tar.gz
#      - dist/*.zip
#    expire_in: 4 weeks
